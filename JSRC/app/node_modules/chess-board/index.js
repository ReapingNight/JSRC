//Method that moves a piece to a new position
function move(board)
{
    return function(posOld, posNew, color){
        let piece = find(board, posOld);
        //Check your piece
        if(piece !== null)
        {
            if(color !== piece.color)
            {
                return null;
            }
    
            let temp = [];

            //Check if space is occupied
            let other = find(board, posNew);

            if(other)
            {
                //Found piece on new position
                if(other.color === piece.color)
                {
                    return null;
                }

                //Check if piece can be captured
                if(piece.hit()(posOld, posNew) !== 0)
                {
                    return null;
                }

                other.position = (other.color * 65 - 1);
                temp.push({color: other.color, type: other.type, position: (other.color * 65 - 1), posOld: parseInt(other.position)})
            }
            else
            {
                //Tile was empty
                //Checks if piece can move to tile
                if (piece.check()(posOld, posNew) !== 0)
                {
                    return null;
                }
            }

            //Promotion to queen
            if ( ( (piece.type ==0)&&(piece.color == 0)&&(Math.floor(posNew/8) == 0 ) ) || ((piece.type ==0)&&(piece.color == 1) && (Math.floor(posNew/8) == 7 ) ) )
            {
            console.log("promoted")
            piece.type = 4;
            } 

            piece.position = parseInt(posNew);

            temp.push({color: piece.color, type: piece.type, position: parseInt(piece.position), posOld: parseInt(posOld)});
            return temp;
        }

        return null;
    };
}

//--Miscellaneous
//Find first object in array by key
function find(array, value)
{
    for(let ii = 0; ii < array.length; ii++)
    {
        if(array[ii].position == value)
        {
            return array[ii];
        }
    }

    return null;
}


module.exports = function(){
    var board = [];
    board.push(new ChessPiece(0,1,63))
    board.push(new ChessPiece(0,2,62))
    board.push(new ChessPiece(0,3,61))
    board.push(new ChessPiece(0,5,60))
    board.push(new ChessPiece(0,4,59))
    board.push(new ChessPiece(0,3,58))
    board.push(new ChessPiece(0,2,57))
    board.push(new ChessPiece(0,1,56))
    board.push(new ChessPiece(0,0,55))
    board.push(new ChessPiece(0,0,54))
    board.push(new ChessPiece(0,0,53))
    board.push(new ChessPiece(0,0,52))
    board.push(new ChessPiece(0,0,51))
    board.push(new ChessPiece(0,0,50))
    board.push(new ChessPiece(0,0,49))
    board.push(new ChessPiece(0,0,48))

    board.push(new ChessPiece(1,1,0))
    board.push(new ChessPiece(1,2,1))
    board.push(new ChessPiece(1,3,2))
    board.push(new ChessPiece(1,4,3))
    board.push(new ChessPiece(1,5,4))
    board.push(new ChessPiece(1,3,5))
    board.push(new ChessPiece(1,2,6))
    board.push(new ChessPiece(1,1,7))
    board.push(new ChessPiece(1,0,8))
    board.push(new ChessPiece(1,0,9))
    board.push(new ChessPiece(1,0,10))
    board.push(new ChessPiece(1,0,11))
    board.push(new ChessPiece(1,0,12))
    board.push(new ChessPiece(1,0,13))
    board.push(new ChessPiece(1,0,14))
    board.push(new ChessPiece(1,0,15))
    return {board, move:move}
};
//ChessPiece Constructor
function ChessPiece(Color, Type, pos)
{
    this.color = Color;
    this.type = Type;
    this.position = pos;
    this.check = function() {
        return validFunction(this.color, this.type);
    }
    this.hit = function(){
        return hitFunction(this.color, this.type);
    }
}

//Logic that checks where a chess piece can move to tile
function validFunction(Color, Type)
{
    switch(Type)
    {
        case 0:
            return function(posOld, posNew)
            {
                var n = (posOld - posNew);
                if((Math.floor(posOld/8)==1)&(Color == 1))
                {
                    return ((8-(Math.pow(-1, Color)*n))*(16-(Math.pow(-1, Color)*n)) )
                }
                if((Math.floor(posOld/8)==6)&(Color == 0))
                {
                    return ((8-(Math.pow(-1, Color)*n))*(16-(Math.pow(-1, Color)*n)) )
                }
                
                return (8-(Math.pow(-1, Color)*n))
            }

        case 1:
            return function(posOld, posNew)
            {
                var n = (posOld-posNew)
                var a = ((Math.floor(posOld)/8)-Math.floor((posNew)/8))
                return ((n%8)*(a));
            }

        case 2:
            return function(posOld, posNew)
            {
                return 0;
            }  

        case 3:
            return function(posOld, posNew)
            {
                var n = (posOld-posNew)
                //return (n%7)*(n%9)
                //needs border rule
                return 0;
            }

        case 4:
            return function(posOld, posNew)
            {
                return 0;
            } 

        case 5:            
            return function(posOld, posNew)
            {
                return 0;
            } 

        default:
            return function(){
                return 0;
            }
    }
}

//Function that checks whether piece can capture on tile
function hitFunction(Color, Type)
{
    switch(Type)
    {
        case 0:
            return function(posOld, posNew)
            {
                let n = (posNew - posOld);
                return (n-(7 * Math.pow((-1), (Color + 1))))*(n-(9 * Math.pow((-1), (Color + 1))));
            }
        case 1:
            return validFunction(Color, Type);
        case 2:
            return validFunction(Color, Type);
        case 3:
            return validFunction(Color, Type);
        case 4:
            return validFunction(Color, Type);
        case 5:            
            return validFunction(Color, Type);
        default:
            return function(){
                return 0;
            }
    }
}